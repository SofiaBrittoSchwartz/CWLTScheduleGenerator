import java.util.ArrayList;
import java.util.HashMap;
import java.util.PriorityQueue;

/**
 * An object representation of a 1 hour shift. If a tutor is working for multiple hours in a row, this will be represented as multiple shifts.
 * @author Sam Berling
 *
 */
public class Shift implements Comparable<Shift>{
	protected Day day; //day of the shift
	protected int time;//start time of the shift. 
	protected PriorityQueue<Tutor> availableTutors;
	//	protected ArrayList<Tutor> preferredTutors; //list of the tutors who preferred this shift, not just are available.
	protected ArrayList<Tutor> assignedTutors;
	protected HashMap<Tutor, Integer> scoreAdjustmentMap; //mapping Tutors to how their base score changes for this score specifically (e.g. preferences)
	protected HashMap<Tutor, Integer> tutorScores;
	private double score = 0; //the sum of the scores of the available tutors for this shift

	protected static final int MIN_TUTORS = 2;
	protected static final int MAX_TUTORS = 8;
	protected static final int PREFERENCE_ADJUSTMENT = -4;
	private static final double BASE_POPULATION_ADJUSTMENT = 1000.0;
	private static final double POPULATION_ADJUSTMENT = BASE_POPULATION_ADJUSTMENT*(MAX_TUTORS-MIN_TUTORS);


	public Shift(Day day, int time){
		this.day = day;
		this.time = time;
		availableTutors = new PriorityQueue<Tutor>();
		assignedTutors = new ArrayList<Tutor>();
		scoreAdjustmentMap = new HashMap<Tutor, Integer>();
	}

	protected void prefer(Tutor tutor){
		if(scoreAdjustmentMap.containsKey(tutor)){
			int newAdjustment = scoreAdjustmentMap.get(tutor) + PREFERENCE_ADJUSTMENT;
			scoreAdjustmentMap.put(tutor, newAdjustment);
		}
		else{
			scoreAdjustmentMap.put(tutor, PREFERENCE_ADJUSTMENT);
		}
	}

	/**
	 * This method determines whether or not this shift is adjacent to (i.e. either immediately precedes or succeeds) the input shift 
	 * @param shift the shift we are comparing to
	 * @return
	 */
	public boolean adjacentTo(Shift shift){
		if(day.compareTo(shift.day)!=0){ //if they are on different days
			return false;
		}
		return (time-shift.time == 1 || time-shift.time == -1);
	}

	public boolean firstShiftOfDay(){
		return (time==day.getFirstAppointment());
	}

	public boolean lastShiftOfDay(){
		return (time==day.getLastAppointment());
	}

	public String toString(){
		return "("+day+" at "+convertTime()+")";//: "+ assignedTutors;
	}

	private void adjustScore(){
		if(hasMax()){ //not so sure about this. seems to make sense for now
			score += Double.MAX_VALUE;
		}
		else{
			tutorAdjustments();
			if(hasMin()){
				score += POPULATION_ADJUSTMENT/(double)(MAX_TUTORS-assignedTutors.size()); //don't know about this, but I wanted heavily populated shifts to be penalized
				//			score += 1000*assignedTutors.size(); //don't know about this value, but we want it to pretty much move to the end of the queue, 
			}
		}
	}

	private void tutorAdjustments() {
		for(Tutor t : availableTutors){
			if(scoreAdjustmentMap.containsKey(t)){
				t.tempScore = t.calculateAvailabilityRatio();//ensure it starts at the base
				t.tempScore += scoreAdjustmentMap.get(t);
			}
		}
		reheapify();
		for(Tutor t : availableTutors){
			t.tempScore = 0;
		}
	}

	public double calculateScore(){ //calculates the score based on the sum of the availableTutors scores. 
		score = 0;
		for(Tutor t : availableTutors){
			score += t.calculateAvailabilityRatio();
		}
		for(Tutor t : assignedTutors){
			score += t.calculateAvailabilityRatio();
		}
		score = Math.round(score*100)/100.0;
		adjustScore();
		return score;
	}

	@Override
	public int compareTo(Shift shift) {
		return (int)(calculateScore()*10 - shift.calculateScore()*10); // multiply by 10 so that we don't lose as much precision on the scores

	}

	public int compareTime(Shift s){
		if(day.compareTo(s.day)!=0){
			return day.compareTo(s.day);
		}
		else{
			return time-s.time;
		}
	}

	private String convertTime(){//converts time to 12h format
		String t;
		if(time < 12){
			t = time+"am";
		}
		else if(time==12){
			t = time+"pm";
		}
		else{
			t = time%12+"pm";
		}
		return t;
	}

	public boolean hasMin(){
		if(time > 9){
			return assignedTutors.size()>=MIN_TUTORS;
		}
		return assignedTutors.size()>=1;
	}

	public boolean hasMax(){
		return assignedTutors.size()>=MAX_TUTORS;
	}

	public boolean hasSubject(String subject){
		for(Tutor tutor : assignedTutors){
			if(tutor.subjects.contains(subject)){
				return true;
			}
		}
		return false;
	}

	public boolean hasSubjectAvailable(String subject){
		for(Tutor tutor : availableTutors){
			if(tutor.subjects.contains(subject)){
				return true;
			}
		}
		return false;
	}

	public boolean hasAvailableTutors(){
		return availableTutors.size()>0;
	}

	public void reheapify(){//reheapifies the tutor PriorityQueue
		ArrayList<Tutor> temp = new ArrayList<Tutor>();
		temp.addAll(availableTutors);
		availableTutors.clear();
		availableTutors.addAll(temp);
	}
}
